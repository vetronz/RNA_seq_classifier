bct.index[[i]] <- i
}
if (phenoData(gset[[1]])$'category:ch1'[i] == 'Definite Viral'){
vrl.index[[i]] <- i
}
}
vrl.index <- vrl.index[!is.na(vrl.index)]
## SUBSET THE GSET TO GET BACT VIRAL DF
index.binary <- c(bct.index, vrl.index)
gset.binary <- gset.df[,index.binary]
gset.binary.t <- as.data.frame(t(gset.binary))
# dim(gset_binary)
dim(gset.binary.t)
## CONSTRUCTS GROUND TRUTH LIST
truth <- character(0)
index.binary <- list(bct.index, vrl.index)
index.binary
for (i in 1:length(index.binary)){
for (j in 1:length(index.binary[[i]])){
print(paste(i, j))
truth = append(truth,i)
}
}
# creates a two level factor from the ground truth vector
label <- factor(truth, levels = c(1,2), labels = c('bacterial', 'viral'))
attributes(label)
# scale
gset.s <- as.data.frame(scale(gset.binary.t))
apply(gset.s, 2, mean)
apply(gset.s, 2, sd)
dim(gset.s)
gset.s$label <- label
dim(gset.s)
gset.s[1:5, 47320:47324] # head
gset.s[139:144, 47320:47324] # tail
## DEFINE TRAINING AND TEST SETS
custom.rows <- c(1,2,47323, 47324)
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
dim(x)
y <- gset.s[,ncol(gset.s)]
# training test split
set.seed(3)
n <- nrow(x)
index <- seq(1:n)
train = sample(1:n, round(n*0.8))
test = index[-train]
intersect(train, test)
x_train <- x[train,]
dim(x_train)
x_test <- x[test,][-ncol(x)] # strip the labels
dim(x_test)
ytest = y[test]
# Basic scatter plot
# x_test <- x[test,]
# p <- ggplot(x_train, aes(x=ILMN_1343291, y=ILMN_3311190))
# p <- ggplot(x_train, aes(x=ILMN_3311190, y=ILMN_1343295))
# p + geom_point(aes(colour = factor(label)), size = 2)
# logistic
logistic.mod1 <- glm(label ~., family = "binomial", data = x_train)
summary(logistic.mod1)
log.pred <- predict(logistic.mod1, x_test, type = 'response')
prediction(log.pred, ytest) %>%
performance(measure = "tpr", x.measure = "fpr") %>%
plot()
# model 1 AUC
prediction(log.pred, ytest) %>%
performance(measure = "auc") %>%
.@y.values
# extracts gene expression data from confident model predictions
x[names(which.min(log.pred)),] # looks bacterial
log.pred[which.min(log.pred)] # 5% prob of being viral
x[names(which.max(log.pred)),] # looks viral
log.pred[which.max(log.pred)] # 98% prob of being viral
# manual probability prediction double check
regression <- sum(logistic.mod1$coefficients[-1] * x[names(which.min(log.pred)),][-ncol(x)]) + logistic.mod1$coefficients[1]
regression <- sum(logistic.mod1$coefficients[-1] * x[names(which.max(log.pred)),][-ncol(x)]) + logistic.mod1$coefficients[1]
1/(1+exp(1)^-(regression))
# find optimal prediction cutoff to maximise f1 score
cutoff <- seq(0.2, 0.9, 0.01)
f1.list <- c()
for (i in 1:length(cutoff)){
# print(cutoff[i])
cat.pred <- ifelse(log.pred < cutoff[i], 'bacterial', 'viral')
table(ytest, cat.pred)
tpr <- table(ytest, cat.pred)[1] / sum(table(ytest, cat.pred)[1] + table(ytest, cat.pred)[3]) # sensitivity / recall
tnr <- table(ytest, cat.pred)[4] / sum(table(ytest, cat.pred)[4] + table(ytest, cat.pred)[2]) # specificity
ppp <- table(ytest, cat.pred)[1] / sum(table(ytest, cat.pred)[1] + table(ytest, cat.pred)[2]) # precision
f1 <- 2 * (ppp * tpr) / (ppp + tpr)
f1.list[i] = f1
}
plot(cutoff, f1.list)
opt.cutoff <- cutoff[which.max(f1.list)]
f1.list[which.max(f1.list)]
# cutoff <- 0.6
cat.pred <- ifelse(log.pred < opt.cutoff, 'bacterial', 'viral')
table(ytest, cat.pred)
###  REGULARIZED APPROACHES
y <- gset.s$label
y
train
test
intersect(train,test)
dim(gset.s)
library(glmnet)   # implementing regularized regression approaches
library(dplyr)
library(ROCR)
swiss <- datasets::swiss
swiss
dim(swiss)
x <- model.matrix(Fertility~., swiss)[,-1]
y <- swiss$Fertility
y.cat <- y > 80
x
y
x
class(x)
class(y)
swiss[,-1]
swiss(swiss[,-1])
class(swiss[,-1])
swiss[,-1]
model.matrix(swiss[,-1])
?model.matrix
data <- swiss[,-1]
y
model.matrix(y, data)
model.matrix(swiss$Fertility, data)
model.matrix(Fertility, data)
model.matrix(Fertility, swiss)
swiss
model.matrix(swiss$Fertility, swiss)
data.matrix(swiss)
x.mat <- data.matrix(swiss[-1])
x.mat[1:5]
x.mat[1:5,5]
x.mat[1:5,1:5]
class(x)
class(y)
y
langth(y)
dim(x)
langth(y)
length(y)
#ridge
ridge.mod <- glmnet(x, y, alpha = 0, lambda = lambda)
lambda <- 10^seq(10, -2, length = 100)
#ridge
ridge.mod <- glmnet(x, y, alpha = 0, lambda = lambda)
predict(ridge.mod, s = 0, type = 'coefficients')
#ridge
ridge.mod <- glmnet(x.mat, y, alpha = 0, lambda = lambda)
predict(ridge.mod, s = 0, type = 'coefficients')
gset.s[1:5,1:5]
gset.s[1:5,(ncol(gset.s)-4):ncol(gset.s)]
gset.mat <- data.matrix(gset.s[-ncol(gset.s)])
dim(gset.mat)
y
y <- gset.s[,ncol(gset.s)]
y
dim(x)
y <- gset.s[,ncol(gset.s)]
# training test split
set.seed(3)
n <- nrow(x)
index <- seq(1:n)
train = sample(1:n, round(n*0.8))
test = index[-train]
intersect(train, test)
x_train <- x[train,]
dim(x_train)
x_test <- x[test,][-ncol(x)] # strip the labels
dim(x_test)
train
test
library(Biobase)
library(GEOquery)
library(glmnet)
library(dplyr)
library(ROCR)
library(dplyr)
library(ggplot2)
## LOAD DATA FROM rds object
setwd('/Users/patrickhedley-miller/code/R/infxRNAseq')
getwd()
gset <-readRDS(file = "gset_GSE72809")
head(gset)
n <- ncol(gset[[1]])
gset.df <- exprs(gset[[1]])
gset.df[1:5,1:5]
colnames(phenoData(gset[[1]]))
phenoData(gset[[1]])$'category:ch1'
## ADD DEF BACT AND DEF VIRAL TO LISTS
bct.index <- c()
vrl.index <- c()
for (i in 1:n){
if (phenoData(gset[[1]])$'category:ch1'[i] == 'Definite Bacterial'){
bct.index[[i]] <- i
}
if (phenoData(gset[[1]])$'category:ch1'[i] == 'Definite Viral'){
vrl.index[[i]] <- i
}
}
vrl.index <- vrl.index[!is.na(vrl.index)]
## SUBSET THE GSET TO GET BACT VIRAL DF
index.binary <- c(bct.index, vrl.index)
gset.binary <- gset.df[,index.binary]
gset.binary.t <- as.data.frame(t(gset.binary))
# dim(gset_binary)
dim(gset.binary.t)
## CONSTRUCTS GROUND TRUTH LIST
truth <- character(0)
index.binary <- list(bct.index, vrl.index)
index.binary
for (i in 1:length(index.binary)){
for (j in 1:length(index.binary[[i]])){
print(paste(i, j))
truth = append(truth,i)
}
}
# creates a two level factor from the ground truth vector
label <- factor(truth, levels = c(1,2), labels = c('bacterial', 'viral'))
attributes(label)
# scale
gset.s <- as.data.frame(scale(gset.binary.t))
apply(gset.s, 2, mean)
apply(gset.s, 2, sd)
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
## DEFINE TRAINING AND TEST SETS
custom.rows <- c(1,2,47323, 47324)
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
## DEFINE TRAINING AND TEST SETS
custom.rows <- c(1,2,47323, 47324)
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
dim(x)
dim(gset.s)
class(gset.s)
dim(gset.s)
gset.s$label <- label
dim(gset.s)
gset.s[1:5, 47320:47324] # head
gset.s[139:144, 47320:47324] # tail
## DEFINE TRAINING AND TEST SETS
custom.rows <- c(1,2,47323, 47324)
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
# custom.rows <- c(47300:47324)
x <- gset.s[, custom.rows]
dim(x)
y <- gset.s[,ncol(gset.s)]
y <- gset.s[,ncol(gset.s)]
# training test split
set.seed(3)
n <- nrow(x)
index <- seq(1:n)
train = sample(1:n, round(n*0.8))
test = index[-train]
intersect(train, test)
train
test
x_train <- x[train,]
dim(x_train)
x_test <- x[test,][-ncol(x)] # strip the labels
dim(x_test)
ytest = y[test]
# need data matrix and y ground truth vector
dim(gset.s)
# need data matrix and y ground truth vector
dim(x)
# need data matrix and y ground truth vector
x <- gset.s[,-ncol(gset.s)]
dim(x)
class(x)
# need data matrix and y ground truth vector
x <- data.matrix(gset.s[,-ncol(gset.s)])
dim(x)
class(x)
y
lambda <- 10^seq(10, -2, length = 100)
train
x[train,]
dim(x[train,])
ridge.mod <- glmnet(x[train,], y[train], alpha = 0, lambda = lambda)
y
class(y)
ridge.mod <- glmnet(x[train,], y[train], family = 'binomial')
ridge.mod
ridge.mod <- glmnet(x[train,], y[train], family = 'binomial', standardize = FALSE)
ridge.mod
plot(ridge.mod, xvar = "lambda")
attributes(ridge.mod)
ridge.mod$lambda %>% head()
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[[1]]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[1]
gset.s[1:5,(ncol(gset.s)-4):ncol(gset.s)]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)['ILMN_3311175']
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)['ILMN_3311175',]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[,'ILMN_3311175']
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)['ILMN_3311175']
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180')]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),10]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180')]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1:2]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1,2,3]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1,2,]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1,2]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180')]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1]
coef(ridge.mod)]
coef(ridge.mod)
coef(ridge.mod)[1]
coef(ridge.mod)[2]
coef(ridge.mod)[3]
coef(ridge.mod)[4]
coef(ridge.mod)
dim(coef(ridge.mod))
coef(ridge.mod)[1,]
coef(ridge.mod)[2,]
coef(ridge.mod)[3,]
coef(ridge.mod)[4,]
coef(ridge.mod)[5,]
coef(ridge.mod)[6,]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),1:2]
# coefficients for the largest and smallest lambda parameters
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180'),]
coef(ridge.mod)['ILMN_3311175',]
coef(ridge.mod)['ILMN_3311175',[1:10]]
coef(ridge.mod)['ILMN_3311175',1:10]
coef(ridge.mod)[c('ILMN_3311175','ILMN_3311180')]
coef(ridge.mod)[1]
coef(ridge.mod)[c('ILMN_3311175')]
coef(ridge.mod)['ILMN_3311175']
coef(ridge.mod)['ILMN_3311175',]
coef(ridge.mod)[1,]
coef(ridge.mod)[1,1:5]
coef(ridge.mod)['ILMN_3311175',1:5]
coef(ridge.mod)[c(1,2),1:5]
coef(ridge.mod)[c(1,2,3),1:5]
coef(ridge.mod)['ILMN_1343291',1:5]
coef(ridge.mod)[c(1,2,3),1:5]
coef(ridge.mod)['ILMN_1343295',1:5]
coef(ridge.mod)[c('ILMN_1343291','ILMN_1343295'),1:5]
coef(ridge.mod)[c(1,2,3),1:5]
coef(ridge.mod)[c('ILMN_1343291','ILMN_1343295'),1:5]
coef(ridge.mod)[1,1:5]
coef(ridge.mod)[1,1]
coef(ridge.mod)[1,100]
gset.h <- getGEO('GSE42026')
head(gset.h)
saveRDS(gset.h, file = 'gset_GSE42026')
n <- ncol(gset.h[[1]])
gset.df <- exprs(gset.h[[1]])
gset.df[1:5,1:5]
colnames(phenoData(gset[[1]]))
phenoData(gset[[1]])$'category:ch1'
gset.df[1:5,1:5]
colnames(phenoData(gset.h[[1]]))
phenoData(gset.h[[1]])$'infecting pathogen:ch1'
getwd()
getwd()
setwd('/Users/patrickhedley-miller/code/gitWorkspace/infxRNAseq')
getwd()
setwd('/Users/patrickhedley-miller/code/R/infxRNAseq')
getwd()
gset.mega <-readRDS(file = "gset_GSE72809")
gset.iris <-readRDS(file = "gset_GSE42026")
gset.m <-readRDS(file = "gset_GSE72809")
gset.i <-readRDS(file = "gset_GSE42026")
# dataframe 1
df1 <- read.table(text = "
ID  precip  lat lon
1   45  115 -122.5
2   42.5    130 -122.5
3   40  155 -122.5
4   37.5    140 -122.5
", header = TRUE)
df1
# dataframe 2
df2 <- read.table(text = "
ID precip  lat lon
1   108.61  115 -122.5
2   85.83   130 -122.5
3   81.01   155 -122.5
4   NA  140 -122.5
", header = TRUE)
# combine by row
df3 <- rbind(df1, df2)
df3
# update ID column
df3$ID <- 1:nrow(df3)
# output
df3
# dataframe 1
df1 <- read.table(text = "
ID  precip  lat lon
1   45  115 -122.5
2   42.5    130 -122.5
3   40  155 -122.5
4   37.5    140 -122.5
", header = TRUE)
head(gset.m)
head(gset.)
head(gset.i)
gset.m.df <- exprs(gset.m)
gset.m.df <- exprs(gset.m[[1]])
dim(gset.m.df)
gset.i.df <- exprs(gset.m[[1]])
dim(gset.i.df)
gset.i.df <- exprs(gset.i[[1]])
dim(gset.m.df)
dim(gset.i.df)
gset.m.df[1,1:10]
gset.m.df[1,1:6]
gset.i.df[1,1:6]
gset.m.df[1:6,1]
gset.i.df[1:6,1]
gset.m.df[1:5,1]
gset.i.df[1:5,1]
names(gset.m.df)
attributes(gset.m.df)
gset.m.df$dimnames[[1]]
df1 = data.frame(x=c('a', 'b', 'c', 'd', 'e', NA))
df2 = data.frame(x=c('a', 'b', 'c'),y1 = c(0,1,0), y2 = c(0,1,0))
names(df1)
df1
names(gset.m.df)
attributes(gset.m)
attributes(gset.m[[1]])
attributes(gset.m.df)
gset.m.df$dimnames[[2]]
gset.m.df$dimnames
gset.m.df$dimnames[1]
attributes(gset.m)
attributes(gset.m[[1]])
colnames(gset.m.df)
rownames(gset.m.df)
length(rownames(gset.m.df))
length(rownames(gset.i.df))
setdiff(rownames(gset.m.df), rownames(gset.i.df))
length(setdiff(rownames(gset.m.df), rownames(gset.i.df)))
setdiff(rownames(gset.m.df), rownames(gset.i.df))[1]
uniq.1 <- setdiff(rownames(gset.m.df), rownames(gset.i.df))[1]
gset.m.df[1]
gset.m.df[1:2]
gset.m.df[uniq.1]
gset.i.df[uniq.1]
gset.m.df[uniq.1,]
gset.i.df[uniq.1,]
gset.m.df[uniq.1,][1]
gset.m.df[uniq.1,1:2]
uniq.1 <- setdiff(rownames(gset.m.df), rownames(gset.i.df))[2]
gset.m.df[uniq.1,1:2]
gset.i.df[uniq.1,]
uniq.1 <- setdiff(rownames(gset.m.df), rownames(gset.i.df))
length(uniq.1)
uniq.1 <- setdiff(rownames(gset.i.df), rownames(gset.m.df))
length(uniq.1)
union(rownames(gset.m.df), rownames(gset.i.df))
a<-union(rownames(gset.m.df), rownames(gset.i.df))
length(a)
intersect(a)
intersect(rownames(gset.m.df), rownames(gset.i.df))
b<-intersect(rownames(gset.m.df), rownames(gset.i.df))
length(b)
symdiff <- function(x, y) { setdiff(union(x, y), intersect(x, y))}
symdiff(a,b)
c <- symdiff(a,b)
length(c)
getwd()
setwd('/Users/patrickhedley-miller/code/gitWorkspace/infxRNAseq')
getwd()
a <- c(1,2,3,4,5)
b <- c(2,3,4,5,6)
setdiff(a,b)
setdiff(b,a)
symdiff(a,b)
symdiff(b,a)
setdiff(a,b)
source('/Users/patrickhedley-miller/code/R/customRScripts.R')
remove(symdiff)
symdiff(c(1,2,3), c(2,3,4))
source('/Users/patrickhedley-miller/code/R/customRScripts.R')
symdiff(c(1,2,3), c(2,3,4))
